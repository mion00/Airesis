!window.console && (console = { log: function () {
}});



function switchText(button) {
    var other_ = button.data('other');
    var text_ = button.text();
    button.data('other', text_);
    button.text(other_);
}


function scrollToElement(element) {
    $viewport.animate({
        scrollTop: element.offset().top - 100
    }, 2000);

    // Stop the animation if the user scrolls. Defaults on .stop() should be fine
    $viewport.bind("scroll mousedown DOMMouseScroll mousewheel keyup", function (e) {
        if (e.which > 0 || e.type === "mousedown" || e.type === "mousewheel") {
            $viewport.stop().unbind('scroll mousedown DOMMouseScroll mousewheel keyup'); // This identifies the scroll as a user action, stops the animation, then unbinds the event straight after (optional)
        }
    });
    return false;
}


$(function () {
    ClientSideValidations.selectors.validate_inputs += ', .select2-container:visible ~ :input:enabled[data-validate]';

    /*$('#great_container').height($(window).height()-0);*/
    var submenupannel = 0;

    disegnaBottoni();

    disegnaProgressBar();

    if ($('.sticky-anchor').length > 0) {
        $(window).scroll(sticky_relocate);
        sticky_relocate();
    }

    $("#logo-but").click(function (event) {
        if (submenupannel == 0) {
            submenupannel = 1;
            $('#menu-top .group-cont').slideDown().delay(200);
            $('#submenu .tria').hide();
            $(this).addClass("sel");
        } else {
            submenupannel = 0;
            $('#menu-top .group-cont').slideUp().delay(0);
            $('#submenu .tria').delay(200).show(0);
            $(this).removeClass("sel");
        }
        event.stopPropagation();
    })
            .keypress(function (event) {
                if (event.which === 13)
                    $(this).click();
            });


    $('html').click(function () {
        if (submenupannel == 1) {
            submenupannel = 0;
            $('#menu-top .group-cont').slideUp().delay(0);
            $('#submenu .tria').delay(200).show(0);
            $(this).removeClass("sel");
        }
    });

    $('.group-cont').click(function (event) {
        event.stopPropagation();
    });


    $('.sub-nav a').click(function () {
        $('.sub-nav dd').removeClass('active');
        $(this).parent().addClass('active');

    });


    $('#logo1mini').click(function () {
        var menu_ = $('#menu-left');
        if (menu_.attr('data-expshow') == 'true') {
            menu_.removeClass('small-show');
            menu_.attr('data-expshow', false);
        }
        else {
            menu_.addClass('small-show');
            menu_.attr('data-expshow', true);
        }
    });


    mybox_animate();

});


function mybox_animate() {
    $(".mybox .mybox_button").click(function () {
        if ($(this).data('menu2show') == 0) {
            $(this).data('menu2show', 1);
            $(this).parent().find('.mycont').slideDown();
            $(this).removeClass('close');

        } else {
            $(this).data('menu2show', 0);
            $(this).parent().find('.mycont').slideUp();
            $(this).addClass('close');
        }
    });
}

function sticky_relocate() {
    var window_top = $(window).scrollTop();
    $('.sticky-anchor').each(function () {
        var div_top = $(this).offset().top;
        if (window_top > (div_top - 90)) {
            $('.sticky').addClass('stick');
        } else {
            $('.sticky').removeClass('stick');
        }
    });
}

function gbutton() {

}

function disegnaBottoni() {
    $('.buttonStyle').gbutton();
    $('.editButton').gbutton({icons: {primary: "ui-icon-pencil"}});
    $('.personButton').gbutton({icons: {primary: "ui-icon-person"}});
    $('.homeButton').gbutton({icons: {primary: "ui-icon-home"}});
    $('.calendarButton').gbutton({icons: {primary: "ui-icon-calendar"}});
    $('.commentButton').gbutton({icons: {primary: "ui-icon-comment"}});
    $('.ideaButton').gbutton({icons: {primary: "ui-icon-lightbulb"}});
    $('.deleteButton').gbutton({icons: {primary: "ui-icon-circle-close"}});
    $('.trashButton').gbutton({icons: {primary: "ui-icon-trash"}});
    $('.newButton').gbutton({icons: {primary: "ui-icon-plusthick"}});
    $('.settingsButton').gbutton({icons: {primary: "ui-icon-wrench"}});
    $('.mapButton').gbutton({icons: {primary: "ui-icon-image"}});
    $('.forwardButton').gbutton({icons: {primary: "ui-icon-arrowthick-1-e"}});
    $('.historyButton').gbutton({icons: {primary: "ui-icon-arrowreturnthick-1-w"}});
    $('.notesButton').gbutton({icons: {primary: "ui-icon-note"}});
    $('.supportButton').gbutton({icons: {primary: "ui-icon-heart"}});
    $('.searchButton').gbutton({icons: {primary: "ui-icon-search"}});
    $('.acceptButton').gbutton({icons: {primary: "ui-icon-check"}});
    $('.saveButton').gbutton({icons: {primary: "ui-icon-check"}});
    $('.updateButton').gbutton({icons: {primary: "ui-icon-check"}});
    $('.rejectButton').gbutton({icons: {primary: "ui-icon-close"}});
    $('.scriptButton').gbutton({icons: {primary: "ui-icon-script"}});
    $('.inviteButton').gbutton({icons: {primary: "ui-icon-mail-open"}});
    $('.documentButton').gbutton({icons: {primary: "ui-icon-document"}});
    $('.closeButton').gbutton({icons: {primary: "ui-icon-close"}});
    $('.draftsButton').gbutton({icons: {primary: "ui-icon-script"}});
    $('.contributeButton').gbutton({icons: {primary: "ui-icon-pencil"}});
    $('.pdfButton').gbutton({icons: {primary: "ui-icon-print"}});
    $('.printButton').gbutton({icons: {primary: "ui-icon-print"}});
    $('.resultsButton').gbutton({icons: {primary: "ui-icon-check"}});
    $('.searchButton').gbutton({icons: {primary: "ui-icon-search"}});
    $('.signalButton').gbutton({icons: {primary: "ui-icon-signal-diag"}});
    $('.hideButton').gbutton({icons: {primary: "ui-icon-power"}});
    $('.lockButton').gbutton({icons: {primary: "ui-icon-locked"}});
    $('.pinButton').gbutton({icons: {primary: "ui-icon-pin-s"}});
    $('.flagButton').gbutton({icons: {primary: "ui-icon-flag"}});
    $('.contactButton').gbutton({icons: {primary: "ui-icon-contact"}});
    $('.feedbackButton').gbutton({icons: {primary: "ui-icon-notice"}});
    $('.videoButton').gbutton({icons: {primary: "ui-icon-video"}});
    $('.infoButton').gbutton({icons: {primary: "ui-icon-info"}});
    $('.bookmarkButton').gbutton({icons: {primary: "ui-icon-bookmark"}});
    $('.extlinkButton').gbutton({icons: {primary: "ui-icon-extlink"}});
    $('.btn.help').gbutton({icons: {primary: "ui-icon-help"}});
    $('.btn.loginButton').gbutton({icons: {primary: "ui-icon-key"}});
    $('.disabledButton').gbutton("option", "disabled", true);


    $(".disableButton")
            .unbind("ajax:beforeSend")
            .bind("ajax:beforeSend", function () {
                hideDisableButton($(this));
            })
            .unbind("ajax:complete")
            .bind("ajax:complete", function () {
                showDisableButton($(this));
            });

    $(".btn.disable")
            .unbind("ajax:beforeSend")
            .bind("ajax:beforeSend", function () {
                hideDisableGButton($(this));
            })
            .unbind("ajax:complete")
            .bind("ajax:complete", function () {
                showDisableGButton($(this));
            });

    $(".disableClickButton")
            .bind("click", function () {
                hideDisableButton($(this));
            });


    $(".disableForm")
            .unbind("ajax:beforeSend")
            .bind("ajax:beforeSend", function () {
                hideDisableButton($('.disableButton', this));
            })
            .unbind("ajax:complete")
            .bind("ajax:complete", function () {
                showDisableButton($('.disableButton', this));
            });
}

function disegnaProgressBar() {
    $('.timeline').each(function () {
        if ($(this).attr('data-initialized') == 'true') return;
        var time_ = $('.time', this);
        var good_ = $('.good', this);
        var quorum_ = $('.cur.quorum', this);
        var badquorum_ = $('.cur.bad.quorum', this);
        time_.animate({width: time_.data('percentage') + '%'}, 2000);
        good_.animate({width: good_.data('percentage') + '%'}, 2000);
        quorum_.css('left', quorum_.data('percentage') + '%');
        badquorum_.css('left', badquorum_.data('percentage') + '%');
        $(this).attr('data-initialized', 'true');
    });

    $('.timeline .cur').qtip({
        position: {
            at: 'bottom center',
            my: 'top center',
            viewport: $(window)
        },
        style: {
            classes: 'qtip-light qtip-shadow',
            tip: {
                corner: true,
                width: 5,
                height: 5
            }
        }
    });

    $('.proposal_bottom .contributes, .proposal_bottom .timeleft, .proposal_bottom .rankDescription').qtip({
        position: {
            at: 'bottom center',
            my: 'top center'
        },
        style: {
            classes: 'qtip-light qtip-shadow',
            tip: {
                corner: true,
                width: 5,
                height: 5
            }
        }
    });

    $('.alert.notify[data-load="true"]').each(function () {
        $(this).qtip({
            content: {
                text: 'Loading...', // The text to use whilst the AJAX request is loading
                ajax: {
                    url: '/alerts/proposal', // URL to the local file
                    type: 'GET', // POST or GET
                    data: 'proposal_id=' + $(this).data('proposal-id'),
                    success: function (data, status) {

                        this.set('content.text', data);
                    }
                }
            },
            position: {
                my: 'bottom center',
                at: 'top center',
                viewport: $(window),
                effect: false
            },
            style: {
                classes: 'qtip-light qtip-shadow'
            },
            hide: {
                fixed: true,
                delay: 500
            }
        });
    });


    $('.proposal_bottom .partecipants').each(function () {
        $(this).qtip({
            content: $('.authors', this),
            position: {
                at: 'bottom center',
                my: 'top center'
            },
            style: {
                classes: 'qtip-light qtip-shadow',
                tip: {
                    corner: true,
                    width: 5,
                    height: 5
                }
            }
        });
    });
}

function hideDisableButton(button) {
    button.hide();
    var toAdd = $('<div class="waitDiv"><%=image_tag "facebook-loader.gif", :alt => "loading..."%> </div>');
    toAdd.width(button.outerWidth(true));
    toAdd.height(button.outerHeight(true));
    button.after(toAdd);
}

function showDisableButton(button) {
    button.show();
    $('.waitDiv').remove();
}

function hideDisableGButton(button) {
    //button.hide();
    var textInside = button.html();

    var toAdd = $('<div class="load"><span>LOADING</span><%=image_tag "gloading.gif", :alt => ""%></div>');
    button.width(button.width());
    button.height(button.height());
    button.empty();
    button.append($('<span class="hidden">').append(textInside));
    button.append(toAdd);
    button.attr('disabled', 'disabled');
    button.bind('click.killlink', function (e) {
        e.preventDefault();
        return false;
    });
}

function showDisableGButton(button) {
    var content = $('.hidden', button).html();
    $('.load', button).remove();
    button.html(content);
    button.removeAttr('disabled');
    button.unbind('click.killlink');
}

var et = {};


function calculate_event_times() {
    et.est = $("#event_starttime");
    et.eet = $("#event_endtime");
    et.eventStartTime = et.est.datetimepicker("getDate");
    et.eventEndTime = et.eet.datetimepicker("getDate");
    et.eventStartDate = new Date(et.eventStartTime);
    et.eventEndDate = new Date(et.eventEndTime);

    et.get = $("#groups_end_time");
    et.cet = $("#candidates_end_time");
    et.groupTime = et.get.datetimepicker("getDate");
    et.candidatesTime = et.cet.datetimepicker("getDate");
    et.groupDate = new Date(et.groupTime);
    et.candidatesDate = new Date(et.candidatesTime);
    //console.log('endate: ' + et.eventEndDate);
    //console.log('startdate: ' + et.eventStartDate);
    //console.log('candidatedate: ' + et.candidatesDate);
    //console.log('entime: ' + et.eventEndTime / 1000);
    //console.log('startime: ' + et.eventStartTime / 1000);
    //console.log('candidatetime: ' + et.candidatesTime / 1000);
}

function addMinutes(date, minutes) {
    console.log('add ' + minutes);
    return new Date(date.getTime() + minutes * 60000);
}

function upperMinutes(date, step) {
    return addMinutes(date, step - (date.getMinutes() % step));
}

function dateToString(date) {
    var day_ = date.getDate()
    var month_ = date.getMonth() + 1
    var year_ = date.getFullYear()

    var hours_ = date.getHours()
    var minutes_ = date.getMinutes()

    if (minutes_ < 10)
        minutes_ = "0" + minutes_


    return day_ + '/' + month_ + '/' + year_ + ' ' + hours_ + ':' + minutes_;
}

function startTimeChanged() {

    //se la data inizio supera la data fine
    if (!(et.eventEndDate.getTime() > et.eventStartDate.getTime())) {
        //reimposto la data fine avanti
        var min15 = addMinutes(et.eventStartTime, 15)
        et.eet.datetimepicker("setDate", min15);
    }

    //se la data inizio supera la data fine gruppi
    if (!(et.groupDate.getTime() > et.eventStartDate.getTime())) {
        //reimposto la data gruppi avanti
        et.get.datetimepicker("setDate", et.eventStartTime);
    }

    //se la data inizio supera la data fine candidati
    if (!(et.candidatesDate.getTime() > et.eventStartDate.getTime())) {
        //reimposto la data candidati avanti
        et.cet.datetimepicker("setDate", et.eventStartTime);
    }

    //imposta come data minima quella di inizio dell'evento
    var diff = Math.floor(( et.eventStartDate - new Date()) / 86400000);
    //et.eet.datetimepicker("option","minDate",diff);
}

function endTimeChanged() {
    //se la data inizio supera la data fine
    if (!(et.eventEndDate.getTime() > et.eventStartDate.getTime())) {
        //reimposta la data inizio indietro
        var min15 = addMinutes(et.eventStartTime, -15)
        et.est.datetimepicker("setDate", min15);
    }
}

function groupsTimeChanged() {

    //se supera la data fine candidati
    if (!(et.candidatesDate.getTime() > et.groupDate.getTime())) {
        //sposto la data fine candidati
        $("#candidates_end_time").datetimepicker("setDate", et.groupTime);
    }

    //se supera la data fine evento
    if (!(et.eventEndDate.getTime() > et.groupDate.getTime())) {
        // sposto la data fine evento in avanti
        et.eet.datetimepicker("setDate", et.groupTime);
    }

    //imposta un limite inferiore alla data fine dei candidati
    var diff = Math.floor(( et.groupDate - new Date()) / 86400000);
    $("#candidates_end_time").datetimepicker("option", "minDate", diff);
}

function candidatesTimeChanged() {
    //se è inferiore alla data fine gruppi
    if (!(et.candidatesDate.getTime() > et.groupDate.getTime())) {
        //sposto indietro la data fine gruppi
        $("#groups_end_time").datetimepicker("setDate", et.candidatesTime);
    }

    //se supera la data fine evento
    if (!(et.eventEndDate.getTime() > et.candidatesDate.getTime())) {
        // sposto la data fine evento in avanti
        var min15 = addMinutes(et.candidatesTime, 15);
        et.eet.datetimepicker("setDate", min15);
    }
}

var datePickerOptions = {
    changeMonth: false,
    changeYear: false,
    yearRange: "c:c+10",
    minDate: -2,
    maxDate: "+10Y",
    duration: "",
    showTime: true,
    constrainInput: true,
    stepMinute: 5,
    stepHour: 1,
    altTimeField: "alt"
}


function disegnaDatePicker() {
    //data inizio evento
    $('#event_starttime').datetimepicker($.extend({}, datePickerOptions, {
        onClose: function (date) {
            calculate_event_times();
            startTimeChanged();
        }
    }));

    //data termine evento
    $("#event_endtime").datetimepicker($.extend({}, datePickerOptions, {
        onClose: function (date) {
            calculate_event_times();
            endTimeChanged();
        }
    }));

    $("#candidates_end_time").datetimepicker($.extend({}, datePickerOptions, {
        onClose: function (date) {
            calculate_event_times();

            candidatesTimeChanged();

        }
    }));

    $('#groups_end_time').datetimepicker($.extend({}, datePickerOptions, {
        onClose: function (date) {
            calculate_event_times();

            groupsTimeChanged();
        }
    }));
}

function deleteMe(el) {
    $(el).remove();
}

function getURLParameter(name) {
    return decodeURIComponent(
            (location.search.match(RegExp("[?|&]" + name + '=(.+?)(&|$)')) || [, null])[1]
    );
}


function array2dToJson(a, p, nl) {
    var i, j, s = '{"' + p + '":[';
    nl = nl || '';
    for (i = 0; i < a.length; ++i) {
        s += nl + array1dToJson(a[i]);
        if (i < a.length - 1) {
            s += ',';
        }
    }
    s += nl + ']}';
    return s;
}

function array1dToJson(a, p) {
    var i, s = '[';
    for (i = 0; i < a.length; ++i) {
        if (typeof a[i] == 'string') {
            s += '"' + a[i] + '"';
        }
        else { // assume number type
            s += a[i];
        }
        if (i < a.length - 1) {
            s += ',';
        }
    }
    s += ']';
    if (p) {
        return '{"' + p + '":' + s + '}';
    }
    return s;
}

function stripScripts(s) {
    var div = document.createElement('div');
    div.innerHTML = s;
    var scripts = div.getElementsByTagName('script');
    var i = scripts.length;
    while (i--) {
        scripts[i].parentNode.removeChild(scripts[i]);
    }
    return div.innerHTML;
}


function read_notifica(el) {
    var parent_ = $(el).parent();
    parent_.addClass('old').removeClass('new');
    var url_ = parent_.attr('href');
    var type_id = $(el).data('type_id');
    var box_ = $('.alert_box.logo[data-id=' + type_id + '] .notify');
    var num_ = parseInt(box_.html());
    if (num_ > 1) {
        num_ -= 1;
        box_.html(num_);
    }
    else {
        box_.remove();
    }
    var proposal_id = parent_.data('proposal-id');
    if (proposal_id) {
        $('.alert.notify[data-proposal-id=' + proposal_id + ']').each(function () {
            var num_ = parseInt($(this).html());
            if (num_ > 1) {
                num_ -= 1;
                $(this).html(num_);
            }
            else {
                $(this).remove();
            }
        });
    }

    $.ajax({
        dataType: 'js',
        type: 'get',
        url: url_
    });
}

function set_noise_data() {
    $('#comments_active').val($('#active .noise_element').map(function () {
        return $(this).data('id')
    }).get());
    $('#comments_inactive').val($('#inactive .noise_element').map(function () {
        return $(this).data('id')
    }).get());
}


function sign_all_as_read(id) {
    $.ajax({
        data: 'id=' + id,
        url: '/alerts/check_all/',
        type: 'post',
        dataType: 'js',
        complete: function (data) {
            var box_ = $('.alert_box.logo[data-id=' + id + '] .notify');
            box_.remove();
            $('#alert_cont_' + id + ' .mess.new').each(function () {
                $(this).removeClass('new');
                var proposal_id = $(this).data('proposal-id');
                if (proposal_id) {
                    $('.alert.notify[data-proposal-id=' + proposal_id + ']').each(function () {
                        var num_ = parseInt($(this).html());
                        if (num_ > 1) {
                            num_ -= 1;
                            $(this).html(num_);
                        }
                        else {
                            $(this).remove();
                        }
                    });
                }
            });
        }
    });
}

function secondsToString(seconds) {
    var years = Math.floor(seconds / 31536000);
    var max = 5;
    var current = 0;
    var str = "";
    if (years && current < max) {
        str += years + ' anni ';
        current++;
    }
    var days = Math.floor((seconds %= 31536000) / 86400);
    if (days && current < max) {
        str += days + ' giorni ';
        current++;
    }
    var hours = Math.floor((seconds %= 86400) / 3600);
    if (hours && current < max) {
        str += hours + ' ore ';
        current++;
    }
    var minutes = Math.floor((seconds %= 3600) / 60);
    if (minutes && current < max) {
        str += minutes + ' minuti ';
        current++;
    }
    var seconds = seconds % 60;
    if (seconds && current < max) {
        str += seconds + ' secondi ';
        current++;
    }

    return str;
}

function getQueryParam(param) {
    var result =  window.location.search.match(
            new RegExp("(\\?|&)" + param + "(\\[\\])?=([^&]*)")
    );

    return result ? result[3] : false;
}

function addQueryParam(url, key, val) {
    var parts = url.match(/([^?#]+)(\?[^#]*)?(\#.*)?/);
    var url = parts[1];
    var qs = parts[2] || '';
    var hash = parts[3] || '';

    if (!qs) {
        return url + '?' + key + '=' + encodeURIComponent(val) + hash;
    } else {
        var qs_parts = qs.substr(1).split("&");
        var i;
        for (i = 0; i < qs_parts.length; i++) {
            var qs_pair = qs_parts[i].split("=");
            if (qs_pair[0] == key) {
                qs_parts[ i ] = key + '=' + encodeURIComponent(val);
                break;
            }
        }
        if (i == qs_parts.length) {
            qs_parts.push(key + '=' + encodeURIComponent(val));
        }
        return url + '?' + qs_parts.join('&') + hash;
    }
}

//hide left panel if the window width is not large enough
function hideLeftPanel() {
    $('#menu-left').addClass('contributes_shown')
    $('#centerpanelextended').addClass('contributes_shown')

}

//hide left panel if the window width is not large enough
function showLeftPanel() {
    $('#menu-left').removeClass('contributes_shown')
    $('#centerpanelextended').removeClass('contributes_shown')
}

function fitRightMenu(fetched) {
    fetched.addClass('contributes_shown');
    fetched.css('display', '');

    fetched.height($(window).height() - 110);

    $(window).resize(function () {
        fetched.height($(window).height() - 110);
    });
}

//custom formatter for categories in select2 dropdown
function formatCategory(state) {
    if (!state.id) return state.text; // optgroup
    return "<img src='/assets/proposal_categories/" + state.id.toLowerCase() + "_s.png'/> " + state.text;
}

//custom formatter for quora in select2 dropdown
function formatQuorum(state) {
    var element_ = state.element;
    if (!state.id) return state.text; // optgroup
    return "<div> <div class=\"quorum_title\">" + state.text + "</div> <div class=\"quorum_desc\">" + $(element_).data('description') + "</div></div>";
}

//custom formatter for vote period in select2 dropdown
function formatPeriod(state) {
    var element_ = state.element;
    if (!state.id) return state.text; // optgroup
    return "<div> <div class=\"period_title\">" + state.text + "</div> <div class=\"period_desc\">" + $(element_).data('title') + "</div></div>";
}


function initTextAreaTag() {
    $('.reply_textarea[data-initialized!=1]').each(function () {
        $(this).textntags({
            triggers: {'@': {uniqueTags: false}},
            onDataRequest: function (mode, query, triggerChar, callback) {
                var data = nicknames;

                query = query.toLowerCase();
                var found = _.filter(data, function (item) {
                    return item.name.toLowerCase().indexOf(query) > -1;
                });

                callback.call(this, found);
            }
        });
        $(this).attr('data-initialized', 1);
    });
}




jQuery.uaMatch = function (ua) {
    ua = ua.toLowerCase();

    var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];

    return {
        browser: match[ 1 ] || "",
        version: match[ 2 ] || "0"
    };
};

// Don't clobber any existing jQuery.browser in case it's different
if (!jQuery.browser) {
    matched = jQuery.uaMatch(navigator.userAgent);
    browser = {};

    if (matched.browser) {
        browser[ matched.browser ] = true;
        browser.version = matched.version;
    }

    // Chrome is Webkit, but Webkit is also Safari.
    if (browser.chrome) {
        browser.webkit = true;
    } else if (browser.webkit) {
        browser.safari = true;
    }

    jQuery.browser = browser;
}


/*we'll do that in 3.1 TODO */

//var rails = $.rails;
//rails.handleRemote = function (element) {
//    console.log('handle remote');
//    if ($(window).width() <=768) return;
//    var method, url, data,
//            crossDomain = element.data('cross-domain') || null,
//            dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType),
//            options;
//
//    if (rails.fire(element, 'ajax:before')) {
//
//        if (element.is('form')) {
//            method = element.attr('method');
//            url = element.attr('action');
//            data = element.serializeArray();
//            // memoized value from clicked submit button
//            var button = element.data('ujs:submit-button');
//            if (button) {
//                data.push(button);
//                element.data('ujs:submit-button', null);
//            }
//        } else if (element.is(rails.inputChangeSelector)) {
//            method = element.data('method');
//            url = element.data('url');
//            data = element.serialize();
//            if (element.data('params')) data = data + "&" + element.data('params');
//        } else {
//            method = element.data('method');
//            url = element.attr('href');
//            data = element.data('params') || null;
//        }
//
//        options = {
//            type: method || 'GET', data: data, dataType: dataType, crossDomain: crossDomain,
//            // stopping the "ajax:beforeSend" event will cancel the ajax request
//            beforeSend: function (xhr, settings) {
//                if (settings.dataType === undefined) {
//                    xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
//                }
//                return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
//            },
//            success: function (data, status, xhr) {
//                element.trigger('ajax:success', [data, status, xhr]);
//            },
//            complete: function (xhr, status) {
//                element.trigger('ajax:complete', [xhr, status]);
//            },
//            error: function (xhr, status, error) {
//                element.trigger('ajax:error', [xhr, status, error]);
//            }
//        };
//        // Only pass url to `ajax` options if not blank
//        if (url) {
//            options.url = url;
//        }
//
//        return rails.ajax(options);
//    } else {
//        return false;
//    }
//};

